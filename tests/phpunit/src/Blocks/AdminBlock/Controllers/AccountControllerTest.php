<?php

namespace Jet\Test\Blocks\AdminBlock\Controllers;
use Jet\Models\Account;


/**
 * Class AccountControllerTest
 * @package Jet\Test\Blocks\AdminBlock\Controllers
 */
class AccountControllerTest extends AdminControllerTest
{

    /**
     *
     */
    public function setUp()
    {
        parent::setUp();
        $this->logAuth(1);
        $this->em->getConnection()->beginTransaction();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->em->getConnection()->rollBack();
    }

    /**
     *
     */
    public function testAll()
    {
        $_GET['params']['role'] = [];
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'all');
        $this->assertEquals('success', $response['status']);
        $this->assertCount(10, $response['content']['data']);
        unset($_GET['params']['role']);
    }

    /**
     *
     */
    public function testUserAll()
    {
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'all');
        $this->assertEquals('success', $response['status']);
        $this->assertCount(5, $response['content']['data']);
    }

    /**
     * @return array
     */
    public function accountCreateDataProvider()
    {
        return array(
            array(6, [], 'error', 'Requête non autorisée'), //#0
            array(1, [   //#1
                'first_name' => 'Test',
                'last_name' => 'test',
                'email' => 'test.test@test.fr',
                'phone' => '0123456789',
                'status' => [
                    'id' => 2,
                    'role' => 'admin',
                ],
                'password' => 'test',
                'confirm_pass' => 'test',
                'state' => 1,
                'photo' => ['path' => '/public/media/user/default-photo.png'],
            ], 'success', 'Le compte a bien été créé'),
            array(1, [ //#2
                'first_name' => 'Test',
                'last_name' => 'test',
                'email' => 'test.test@test.fr',
                'phone' => '0123456789',
                'status' => [
                    'id' => '2',
                    'role' => 'admin',
                ],
                'password' => 'test',
                'confirm_pass' => 'test',
            ], 'success', 'Le compte a bien été créé'),
            array(1, [  //#3
                'first_name' => 'Test',
                'last_name' => 'test',
                'email' => 'luffy@onepiece.com',
                'phone' => '0123456789',
                'status' => [
                    'id' => '2',
                    'role' => 'admin',
                ],
                'password' => 'test',
                'confirm_pass' => 'test',
            ], 'error', 'L\'e-mail est déjà utilisé'),
            array(1, [  //#4
                'first_name' => 'Test',
                'last_name' => 'test',
                'email' => 'test.test@test.fr',
                'phone' => '0123456789',
                'status' => [
                    'id' => 10,
                    'role' => 'admin',
                ],
                'password' => 'test',
                'confirm_pass' => 'test',
            ], 'error', 'Le status n\'a pas été trouvé'),
            array(1, [  //#5
                'first_name' => 'Test',
                'last_name' => 'test',
                'email' => 'test.test@test.fr',
                'phone' => '0123456789',
                'status' => [
                    'id' => '2',
                    'role' => 'admin',
                ],
                'password' => 'test',
                'confirm_pass' => 'test',
                'photo' => ['id' => 100000],
            ], 'error', 'La photo n\'a pas été trouvée'),
            array(1, [ //#6
                'first_name' => 'Test',
                'last_name' => 'test',
                'email' => 'test.test@test.fr',
                'phone' => '0123456789',
                'status' => [
                    'id' => '2',
                    'role' => 'admin',
                ],
                'password' => 'test',
                'confirm_pass' => 'test ',
            ], 'error', [
                'confirm_pass' => ['noWhitespace' => 'Le mot de passe ne doit pas contenir d\'espace'],
                'password' => [
                    'same' => 'Les 2 mots de passe doivent être identiques'
                ],
            ]),
        );
    }

    /**
     * @dataProvider accountCreateDataProvider
     * @param $auth
     * @param $account
     * @param $status
     * @param $message
     */
    public function testCreate($auth, $account, $status, $message)
    {
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $this->logoutAuth();
        $this->logAuth($auth);
        $_POST = $account;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'create', ['auth' => $this->auth]);
        $this->assertEquals($status, $response['status']);
        $this->assertEquals($message, $response['message']);
        $_SERVER['REQUEST_METHOD'] = 'GET';
    }

    /**
     * @return array
     */
    public function accountProvider()
    {
        return array(
            array('sumugan.sinnarasa@desico.fr', 'sumugan.sinnarasa@desico.fr', 'success', ''),
            array('sumugan.sinnarasa@desico.fr', 100, 'error', 'Compte inexistant'),
            array('luffy@onepiece.com', 'sumugan.sinnarasa@desico.fr', 'error', 'Vous n\'avez pas les permissions'),
        );
    }

    /**
     * @dataProvider accountProvider
     * @param $auth
     * @param $account
     * @param $status
     * @param $message
     */
    public function testRead($auth, $account, $status, $message)
    {
        $this->logoutAuth();
        $auth = (is_string($auth)) ? Account::select('id')->where('email', $auth)->get(true) : ['id' => $auth];
        $account = (is_string($account)) ? Account::select('id')->where('email', $account)->get(true) : ['id' => $account];
        if(isset($auth['id']) && isset($account['id'])) {
            $this->logAuth($auth['id']);
            $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'read', ['auth' => $this->auth, 'id' => $account['id']]);
            $this->assertEquals($status, $response['status']);
            if ($response['status'] == 'error')
                $this->assertEquals($message, $response['message']);
        }
    }

    /**
     * @return array
     */
    public function societyAccountProvider()
    {
        return array(
            array('sumugan.sinnarasa@desico.fr', 'success', 1),
            array('thilakzan.kanagartanam@desico.fr', 'error', 0),
            array('luffy@onepiece.com', 'success', 0),
            array(100, 'error', 0),
        );
    }

    /**
     * @dataProvider societyAccountProvider
     * @param $account
     * @param $status
     * @param $count_societies
     */
    public function testGetSocieties($account, $status, $count_societies)
    {
        $account = (is_string($account)) ? Account::select('id')->where('email', $account)->get(true) : ['id' => $account];
        if(isset($account['id'])) {
            $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'getSocieties', ['id' => $account['id']]);
            $this->assertEquals($status, $response['status']);
            if (isset($response['resource'])) $this->assertGreaterThan($count_societies, count($response['resource']));
        }
    }

    /**
     * @return array
     */
    public function accountDataProvider()
    {
        return array(
            array(1, [
                'id' => 1,
                'status' => 1,
                'first_name' => 'Sumugan',
                'last_name' => 'SINNARASA',
                'password' => '',
                'email' => 'sumugan.sinnarasa',
                'confirm_pass' => '',
                'phone' => '01474',
                'photo' => 1,
                'state' => 1
            ], 'error', [
                'email' => ['email' => 'Le format de l\'email est incorrect'],
                'status.id' => ['required' => 'Tout les champs précédé d\'un astérix doivent être remplis'],
            ]),
            array(1, [
                'id' => 1,
                'status' => ['id' => 1],
                'first_name' => 'Sumugan',
                'last_name' => 'SINNARASA',
                'password' => '',
                'confirm_pass' => '',
                'phone' => '0147060814',
                'photo' => 1,
                'state' => 1
            ], 'error', [
                'email' => ['required' => 'Tout les champs précédé d\'un astérix doivent être remplis'],
            ]),
            array(1, [
                'id' => 1,
                'status' => ['id' => 1],
                'first_name' => 'Sumugan',
                'last_name' => 'Sinnarasa',
                'password' => 'test',
                'email' => 'sumugan.sinnarasa@desico.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'photo' => 1,
                'state' => 1
            ], 'error', [
                'password' => ['same' => 'Les 2 mots de passe doivent être identiques'],
            ]),
            array(1, [
                'id' => 1,
                'status' => ['id' => 1],
                'first_name' => 'S',
                'last_name' => 'Sinnarasa',
                'password' => 'admin',
                'email' => 'sumugan.sinnarasa@desico.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'photo' => 1,
                'state' => 1
            ], 'error', [
                'first_name' => ['length' => 'Le nom et le prénom doivent comporter au plus 2 caractères et au moins 20 caractères'],
            ]),
            array(1, [
                'id' => 1,
                'status' => ['id' => 1],
                'first_name' => 'Sumugan',
                'last_name' => 'Sinnarasa',
                'password' => 'admin',
                'email' => 'sumugan.sinnarasa@desico.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'state' => 1
            ], 'success', 'Le compte a été mis à jour'),
            array(7, [
                'id' => 1,
                'status' => 1,
                'first_name' => 'Sumugan',
                'last_name' => 'Sinnarasa',
                'password' => 'admin',
                'email' => 'sumugan.sinnarasa@desico.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'photo' => 1,
                'state' => 1
            ], 'error', 'Requête non autorisée'),
            array(1, [
                'id' => 20,
                'status' => 1,
                'first_name' => 'Sumugan',
                'last_name' => 'Sinnarasa',
                'password' => 'admin',
                'email' => 'sumugan.sinnarasa@desico.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'photo' => 1,
                'state' => 1
            ], 'error', 'Compte inexistant'),
            array(1, [
                'id' => 1,
                'status' => ['id' => 1],
                'first_name' => 'Sumugan',
                'last_name' => 'Sinnarasa',
                'password' => 'admin',
                'email' => 'renaud.alquier@desico.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'state' => 1
            ], 'error', 'L\'e-mail est déjà utilisé'),
            array(1, [
                'id' => 1,
                'status' => ['id' => 1],
                'first_name' => 'Sumugan',
                'last_name' => 'Sinnarasa',
                'password' => 'admin',
                'email' => 'test.test@test.fr',
                'confirm_pass' => 'admin',
                'phone' => '0147060814',
                'photo' => ['id' => 100000],
                'state' => 1
            ], 'error', 'La photo n\'a pas été trouvée')
        );
    }

    /**
     * @dataProvider accountDataProvider
     * @param $auth
     * @param $account
     * @param $status
     * @param $message
     */
    public function testUpdate($auth, $account, $status, $message)
    {
        $_SERVER['REQUEST_METHOD'] = 'PUT';
        $_POST = $account;
        $this->logoutAuth();
        $this->logAuth($auth);
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'update', ['auth' => $this->auth, 'id' => $account['id']]);
        $this->assertEquals($status, $response['status']);
        $this->assertEquals($message, $response['message']);
        $_SERVER['REQUEST_METHOD'] = 'GET';
    }

    /**
     * @return array
     */
    public function accountDeleteProvider()
    {
        return [
            ['DELETE', 1, [1], 'error', 'Vous ne pouvez pas supprimer votre compte. Veuillez contacter votre administrateur pour faire la manipulation.'],
            ['DELETE', 1, [11], 'success', 'Le(s) compte(s) ont bien été supprimé(s)'],
            ['GET', 1, [11], 'error', 'Requête non autorisée'],
            ['DELETE', 2, [1], 'error', 'Vous n\'avez pas les droits nécessaire pour supprimer le(s) compte(s) suivant(s)'],
        ];
    }

    /**
     * @dataProvider accountDeleteProvider
     * @param $method
     * @param $auth
     * @param $accounts
     * @param $status
     * @param $message
     */
    public function testDelete($method, $auth, $accounts, $status, $message)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST['ids'] = $accounts;
        $this->logoutAuth();
        $this->logAuth($auth);
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'delete', ['auth' => $this->auth]);
        $this->assertEquals($status, $response['status']);
        $this->assertEquals($message, $response['message']);
        $_SERVER['METHOD'] = 'GET';
    }

    /**
     * @return array
     */
    public function accountChangeStateProvider()
    {
        return [
            ['PUT', 1, ['ids' => [7], 'state' => 0], 'success', 'Le(s) compte(s) ont bien été mis à jour'],
            ['PUT', 1, ['ids' => [8, 9], 'state' => 0], 'success', 'Le(s) compte(s) ont bien été mis à jour'],
            ['DELETE', 1, ['ids' => [6], 'state' => 0], 'error', 'Requête non autorisée'],
        ];
    }

    /**
     * @dataProvider accountChangeStateProvider
     * @param $method
     * @param $auth
     * @param $accounts
     * @param $status
     * @param $message
     */
    public function testChangeState($method, $auth, $accounts, $status, $message)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST = $accounts;
        $this->logoutAuth();
        $this->logAuth($auth);
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'changeState', ['auth' => $this->auth]);
        $this->assertEquals($status, $response['status']);
        $this->assertEquals($message, $response['message']);
        $_SERVER['METHOD'] = 'GET';
    }

    /**
     * @return array
     */
    public function accountRequestProvider()
    {
        return [
            [['start' => '01-02-2000', 'end' => '01-05-2000'], 'success'],
            [['st' => '01-02-2000', 'end' => '01-05-2000'], 'error'],
        ];
    }

    /**
     * @dataProvider accountRequestProvider
     * @param $query
     * @param $status
     */
    public function testListBetweenDates($query, $status)
    {
        $_GET = $query;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\AccountController', 'listBetweenDates', []);
        if ($status == 'success')
            $this->assertTrue(isset($response['dates']));
        else
            $this->assertEquals($status, $response['status']);
        $_SERVER['METHOD'] = 'GET';
    }
}