<?php

namespace Jet\Test\Blocks\AdminBlock\Controllers;

use Jet\Models\Content;
use Jet\Models\Page;
use Jet\Models\Website;


/**
 * Class ContentControllerTest
 * @package Jet\Test\Blocks\AdminBlock\Controllers
 */
class ContentControllerTest extends AdminControllerTest
{
    /**
     *
     */
    public function setUp()
    {
        parent::setUp();
        $this->logAuth(1);
        $this->em->getConnection()->beginTransaction();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->em->getConnection()->rollBack();
    }

    /**
     * @return array
     */
    public function contentProvider()
    {
        return [
            [100, 1, ['status' => 'error', 'message' => 'Impossible de trouver le site']],
            ['aster-society', 30, -1],
            ['aster-society', 'Accueil', 0],
            ['balsamine-society', 'Accueil', 1]
        ];
    }

    /**
     * @dataProvider contentProvider
     * @param $website
     * @param $page
     * @param $result
     */
    public function testGetPageContents($website, $page, $result)
    {
        $website = is_string($website) ? Website::select('id')->where('domain', $website)->get(true) : ['id' => $website];
        $page = is_string($page) ? Page::select('id')->where('title', $page)->where('website', $website['id'])->get(true) : ['id' => $page];
        if(isset($page['id'])) {
            $response = $this->callMethod('Jet\AdminBlock\Controllers\ContentController', 'getPageContents', [$website['id'], $page['id']]);
            if (isset($response['status'])) {
                $this->assertEquals($response, $result);
            } else {
                $this->assertGreaterThan($result, count($response));
            }
        }
    }

    /**
     * @return array
     */
    public function contentGlobalProvider()
    {
        return [
            [100, ['status' => 'error', 'message' => 'Impossible de trouver le site']],
            ['aster-society', 0],
            ['balsamine-society', 0]
        ];
    }

    /**
     * @dataProvider contentGlobalProvider
     * @param $website
     * @param $result
     */
    public function testGetGlobalContents($website, $result)
    {
        $website = is_string($website) ? Website::select('id')->where('domain', $website)->get(true) : ['id' => $website];
        if(isset($website['id'])) {
            $response = $this->callMethod('Jet\AdminBlock\Controllers\ContentController', 'getGlobalContents', [$website['id']]);
            if (isset($response['status'])) {
                $this->assertEquals($response, $result);
            } else {
                $this->assertGreaterThan($result, $response);
            }
        }
    }

    /**
     * @return array
     */
    public function contentsProvider()
    {
        return [
            ['GET', 1, [], 1, 1, 'error', 'Requête non autorisée', 0],
            ['PUT', 1, [], 1, 1, 'success', 'Aucuns contenus trouvés', 0],
            ['PUT', 1, null, 1, 1, 'success', 'Aucuns contenus trouvés', 0],
            ['PUT', 1, [
                ['name' => 'test']
            ], 11, 1, 'error', 'Impossible de trouver le site', 0],
            ['PUT', 1, [
                [
                    'block' => 'test',
                    'name' => 'test',
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 1, 'error', [
                'module.id' => ['required' => 'Tous les champs précédés d\'un astérisque sont obligatoires']
            ], 0],
            ['PUT', 1, [
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 10],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 1, 'error', 'Module non trouvé', 0],
            ['PUT', 1, [
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 200, 'error', 'Page non trouvée', 0],
            ['PUT', 1, [
                [
                    'id' => 100,
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 2, 'error', 'Contenu non trouvé', 0],
            ['PUT', 10, [
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 2, 'error', 'Vous n\'avez pas les permissions pour supprimer ces contenus', 2],
            ['PUT', 1, [
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 2, 'success', 'Les contenus ont bien été mis à jour', 2],
            ['PUT', 1, [
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ],
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 'global', 'success', 'Les contenus ont bien été mis à jour', 3],
            ['POST', 1, [
                [
                    'id' => 1,
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ],
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 'global', 'success', 'Les contenus ont bien été mis à jour', 3],
            ['POST', 1, [
                [
                    'id' => 1,
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ],
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 2, 'success', 'Les contenus ont bien été mis à jour', 2],
            ['POST', 1, [
                [
                    'id' => 7,
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ],
                [
                    'block' => 'test',
                    'name' => 'test',
                    'module' => ['id' => 1],
                    'template' => ['id' => 1],
                    'data' => ['class' => '', 'test' => 'test'],
                ]
            ], 1, 2, 'success', 'Les contenus ont bien été mis à jour', 3],
        ];
    }


    /**
     * @dataProvider contentsProvider
     * @param $method
     * @param $auth
     * @param $contents
     * @param $website
     * @param $page
     * @param $status
     * @param $message
     * @param $all
     */
    public function testUpdateOrCreate($method, $auth, $contents, $website, $page, $status, $message, $all)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        if (!is_null($contents)) $_POST['contents'] = $contents;
        $this->logoutAuth();
        $this->logAuth($auth);
        $response = $this->callMethod('Jet\AdminBlock\Controllers\ContentController', 'updateOrCreate', ['auth' => $this->auth, 'website' => $website, 'page' => $page]);
        $this->assertEquals($status, $response['status']);
        $this->assertEquals($message, $response['message']);
        if (isset($response['resource']))
            $this->assertGreaterThanOrEqual($all, count($response['resource']));
    }


    /**
     * @return array
     */
    public function contentDeleteProvider()
    {
        return [
            ['GET', 1, 1, [], ['status' => 'error', 'message' => 'Requête non autorisée'], 0],
            ['DELETE', 10, 1, [1], ['status' => 'error', 'message' => 'Vous n\'avez pas les permission pour supprimer ces contenus'], 0],
            ['DELETE', 1, 1, [], ['status' => 'success', 'message' => 'Les contenus ont bien été supprimés'], 0],
            ['DELETE', 1, 20, [], ['status' => 'error', 'message' => 'Impossible de trouver le site web'], 0],
            ['DELETE', 1, 1, [1, 2], ['status' => 'success', 'message' => 'Les contenus ont bien été supprimés'], 2],
            ['DELETE', 1, 1, [1, 2, 7], ['status' => 'success', 'message' => 'Les contenus ont bien été supprimés'], 2],
        ];
    }

    /**
     * @dataProvider contentDeleteProvider
     * @param $method
     * @param $auth
     * @param $website
     * @param $contents
     * @param $result
     * @param $deleted
     */
    public function testDelete($method, $auth, $website, $contents, $result, $deleted)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST['ids'] = $contents;
        $this->logoutAuth();
        $this->logAuth($auth);
        $all = Content::count();
        $response = $this->callMethod('Jet\AdminBlock\Controllers\ContentController', 'delete', ['auth' => $this->auth, 'website' => $website]);
        $this->assertEquals($response, $result);
        if ($result['status'] == 'success') $this->assertEquals($deleted, $all - Content::count());
    }
}