<?php

namespace Jet\Test\Blocks\AdminBlock\Controllers;


/**
 * Class TemplateControllerTest
 * @package Jet\Test\Blocks\AdminBlock\Controllers
 */
class TemplateControllerTest extends AdminControllerTest
{
    /**
     *
     */
    public function setUp()
    {
        parent::setUp();
        $this->logAuth(1);
        $this->em->getConnection()->beginTransaction();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->em->getConnection()->rollBack();
    }

    /**
     * @return array
     */
    public function requestProvider()
    {
        return [
            [
                ['length' => 10], 10
            ],
            [
                ['length' => 100], 37
            ],
            [
                ['search' => ['value' => 'Theme']], 10
            ],
            [
                ['length' => 100, 'search' => ['value' => 'Theme']], 30
            ],
        ];
    }

    /**
     * @dataProvider requestProvider
     * @param $request
     * @param $result
     */
    public function testAll($request, $result)
    {
        $_GET = $request;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'all', []);
        $this->assertGreaterThanOrEqual($result, $response['data']);
    }

    /**
     * @return array
     */
    public function createProvider()
    {
        return [
            ['GET', [], 'Requête non autorisée'],
            ['POST',[
                'name' => 'te',
                'title' => '',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], [
                'name' => ['length' => 'Le nom et le titre doivent comporter au plus 2 caractères et au moins 50 caractères'],
                'title' => ['required' => 'Tout les champs sont requis']
                ]
            ],
            ['POST',[
                'name' => 'ThemeHeliotropeFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Le template existe déjà'],
            ['POST',[
                'name' => 'test',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'file',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Fichier non trouvé'],
            ['POST',[
                'name' => 'test',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Le template a bien été créé']
        ];
    }

    /**
     * @dataProvider createProvider
     * @param $method
     * @param $data
     * @param $message
     */
    public function testCreate($method, $data, $message)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST = $data;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'create');
        $this->assertEquals($message, $response['message']);
    }

    /**
     * @return array
     */
    public function readProvider()
    {
        return [
            [1, 'success'],
            [100000, 'error'],
        ];
    }

    /**
     * @dataProvider readProvider
     * @param $id
     * @param $status
     */
    public function testRead($id, $status)
    {
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'read', ['id' => $id]);
        $this->assertEquals($status, $response['status']);
    }

    /**
     * @return array
     */
    public function updateProvider()
    {
        return [
            ['GET', 1, [], 'Requête non autorisée'],
            ['PUT', 1000, [], 'Template inexistant'],
            ['PUT', 1, [
                'name' => 'te',
                'title' => '',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], [
                'name' => ['length' => 'Le nom et le titre doivent comporter au plus 2 caractères et au moins 50 caractères'],
                'title' => ['required' => 'Tout les champs sont requis']
            ]
            ],
            ['PUT', 1, [
                'name' => 'ThemeHeliotropeHomePageFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Le nom du template est déjà pris'],
            ['PUT', 1, [
                'name' => 'ThemeBalsamineFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'file',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Fichier non trouvé'],
            ['PUT', 1, [
                'name' => 'test',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Le template a été mis à jour']
        ];
    }

    /**
     * @dataProvider updateProvider
     * @param $method
     * @param $id
     * @param $data
     * @param $message
     */
    public function testUpdate($method, $id, $data, $message)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST = $data;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'update', [$id]);
        $this->assertEquals($message, $response['message']);
    }

    /**
     * @return array
     */
    public function updateOrCreateProvider()
    {
        return [
            ['GET', 1, 1, [], 'Requête non autorisée'],
            ['PUT', 1, 1000, [], 'Template inexistant'],
            ['PUT', 1, 1, [
                'name' => 'te',
                'title' => '',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specifid',
                'content' => '/test',
                'path' => ''
            ], [
                'name' => ['length' => 'Le nom et le titre doivent comporter au plus 2 caractères et au moins 50 caractères'],
                'title' => ['required' => 'Tout les champs sont requis'],
                'scope' => ['regex' => 'Le scope n\'est pas reconnu']
            ]
            ],
            ['PUT', 1, 1, [
                'name' => 'ThemeHeliotropeFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'file',
                'scope' => 'specified',
                'content' => '/test',
                'path' => ''
            ], 'Fichier non trouvé'],
            ['PUT', 1000, 1, [
                'name' => 'ThemeHeliotropeFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '<html></html>',
                'path' => ''
            ], 'Site web non trouvé'],
            ['POST', 5, 'create', [
                'name' => 'ThemeHeliotropeFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '<html></html>',
                'path' => ''
            ], 'Le template existe déjà'],
            ['POST', 5, 'create', [
                'name' => 'ThemeTestContentLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '<html></html>',
                'path' => ''
            ], 'Le template a été mis à jour'],
            ['PUT', 3, 15, [
                'name' => 'ThemeBalsamineFileLayout',
                'title' => 'Test',
                'category' => 'partial',
                'type' => 'content',
                'scope' => 'specified',
                'content' => '<html></html>',
                'path' => ''
            ], 'Le template a été mis à jour'],
        ];
    }

    /**
     * @dataProvider updateOrCreateProvider
     * @param $method
     * @param $website
     * @param $id
     * @param $data
     * @param $message
     */
    public function testUpdateOrCreate($method, $website, $id, $data, $message)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST = $data;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'updateOrCreate', [$website, $id]);
        $this->assertEquals($message, $response['message']);
    }

    /**
     * @return array
     */
    public function deleteProvider()
    {
        return [
            ['POST', [], 'Les templates n\'ont pas pu être supprimés'],
            ['DELETE', [], 'Les templates ont bien été supprimés'],
        ];
    }

    /**
     * @dataProvider deleteProvider
     * @param $method
     * @param $ids
     * @param $message
     */
    public function testDelete($method, $ids, $message)
    {
        $_SERVER['REQUEST_METHOD'] = $method;
        $_POST['ids'] = $ids;
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'delete');
        $this->assertEquals($message, $response['message']);
    }

    /**
     * @return array
     */
    public function getWebsiteLayoutsProvider()
    {
        return [
            [1000, 0, 'error', 'Impossible de trouver le site'],
            [5, 10, 'success', ''],
            [6, 10, 'success', ''],
        ];
    }

    /**
     * @dataProvider getWebsiteLayoutsProvider
     * @param $website
     * @param $total
     * @param $status
     * @param $message
     */
    public function testGetWebsiteLayouts($website, $total, $status, $message)
    {
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'getWebsiteLayouts', [$website]);
        if($status == 'success') {
            $this->assertGreaterThanOrEqual($total, $response);
        }else{
            $this->assertEquals($message, $response['message']);
        }
    }

    /**
     * @return array
     */
    public function findWithContentProvider()
    {
        return [
            [1000, 'error', 'Impossible de trouver le template'],
            [5, 'success', ''],
        ];
    }

    /**
     * @dataProvider findWithContentProvider
     * @param $id
     * @param $status
     * @param $message
     */
    public function testFindWithContent($id, $status, $message)
    {
        $response = $this->callMethod('Jet\AdminBlock\Controllers\TemplateController', 'findWithContent', [$id]);
        if($status == 'success') {
            $this->assertEquals($id, $response['resource']->getId());
        }else{
            $this->assertEquals($message, $response['message']);
        }
    }

}